package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/jxsr12/oldegg/config"
	"github.com/jxsr12/oldegg/graph/model"
)

// Products is the resolver for the products field.
func (r *categoryResolver) Products(ctx context.Context, obj *model.Category) ([]*model.Product, error) {
	var models []*model.Product
	return models, r.DB.Where("category_id = ?", obj.ID).Where("(original_product_id IS NULL OR original_product_id = id)").Find(&models).Error
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct, shopID string) (*model.Product, error) {
	var db = config.GetDB()
	id := uuid.NewString()
	model := &model.Product{
		ID:          id,
		Name:        input.Name,
		Description: input.Description,
		Price:       input.Price,
		Stock:       input.Stock,
		Image:       input.Image,
	}

	return model, db.Create(model).Error
}

// CreateProductImage is the resolver for the createProductImage field.
func (r *mutationResolver) CreateProductImage(ctx context.Context, image string, productID string) (*model.ProductImage, error) {
	model := &model.ProductImage{
		ID:        uuid.NewString(),
		Image:     image,
		ProductID: productID,
	}

	return model, r.DB.Create(model).Error
}

// CreateProductImages is the resolver for the createProductImages field.
func (r *mutationResolver) CreateProductImages(ctx context.Context, images []string, productID string) (bool, error) {
	for _, img := range images {
		model := &model.ProductImage{
			ID:        uuid.NewString(),
			Image:     img,
			ProductID: productID,
		}
		err := r.DB.Create(model).Error

		if err != nil {
			return false, err
		}
	}
	return true, nil
}

// Product is the resolver for the product field.
func (r *productImageResolver) Product(ctx context.Context, obj *model.ProductImage) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, limit *int) ([]*model.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	var db = config.GetDB()

	product := new(model.Product)

	// return product, r.DB.First(product, "original_product_id = ? AND (valid_to = '"+os.Getenv("MIN_DATE")+"' OR valid_to IS NULL)", id).Error
	return product, db.Where("id = ?", id).Limit(1).Find(product).Error
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, shopID *string, limit *int, offset *int, input *model.SearchProduct, topSold *bool) ([]*model.Product, error) {
	var models []*model.Product

	var db = config.GetDB()

	return models, db.Find(&models).Error
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// ProductImage returns ProductImageResolver implementation.
func (r *Resolver) ProductImage() ProductImageResolver { return &productImageResolver{r} }

type categoryResolver struct{ *Resolver }
type productImageResolver struct{ *Resolver }
